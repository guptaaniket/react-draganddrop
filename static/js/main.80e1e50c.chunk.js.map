{"version":3,"sources":["screen/home.js","App.js","serviceWorker.js","index.js"],"names":["employeeList","Employee","Employess","Home","draggable","e","preventDefault","console","log","card_id","dataTransfer","getData","card","document","getElementById","style","display","target","appendChild","dragOver","dragStart","setData","id","dragOverTable","state","className","map","item","index","key","Name","onDrop","onDragOver","GetOrder","job","jobname","workorders","work","ind","onDragStart","name","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"y7BAOMA,G,YAAeC,EAASC,WACTC,E,kDACnB,aAAe,IAAD,8BACZ,gBAGFC,UAAY,SAACC,GACXA,EAAEC,iBACFC,QAAQC,IAAI,YACZ,IAAMC,EAAUJ,EAAEK,aAAaC,QAAQ,WACjCC,EAAOC,SAASC,eAAeL,GACrCG,EAAKG,MAAMC,QAAU,QACrBX,EAAEY,OAAOC,YAAYN,IAVT,EAYdO,SAAW,SAACd,GACVA,EAAEC,kBAbU,EAedc,UAAY,SAACf,GACXE,QAAQC,IAAI,aACZ,IAAMS,EAASZ,EAAEY,OACjBZ,EAAEK,aAAaW,QAAQ,UAAWJ,EAAOK,KAlB7B,EAoBdC,cAAgB,SAAClB,GACfA,EAAEC,kBAnBF,EAAKkB,MAAQ,GAFD,E,qDAwBJ,IAAD,OAEP,OADAjB,QAAQC,IAAIR,GAEV,yBAAKyB,UAAU,aACb,yDACA,6BACE,+BACE,+BACE,wBAAIH,GAAG,WACL,6BACA,2CACA,2CACA,2CACA,2CACA,6CAGJ,+BACGtB,EAAa0B,KAAI,SAACC,EAAKC,GACtB,OACE,wBACAC,IAAKD,GACH,wBACAN,GAAE,UAAKK,EAAKG,KAAV,MACAH,EAAKG,MACP,wBACEC,OAAQ,EAAK3B,UACb4B,WAAY,EAAKT,cACjBE,UAAU,GACVH,GAAE,UAAKK,EAAKG,KAAV,OAEJ,wBACEC,OAAQ,EAAK3B,UACb4B,WAAY,EAAKb,SACjBM,UAAU,GACVH,GAAE,UAAKK,EAAKG,KAAV,OAEJ,wBACEC,OAAQ,EAAK3B,UACb4B,WAAY,EAAKb,SACjBM,UAAU,GACVH,GAAE,UAAKK,EAAKG,KAAV,OAEJ,wBACEC,OAAQ,EAAK3B,UACb4B,WAAY,EAAKb,SACjBM,UAAU,GACVH,GAAE,UAAKK,EAAKG,KAAV,OAEJ,wBACEC,OAAQ,EAAK3B,UACb4B,WAAY,EAAKb,SACjBM,UAAU,aACVH,GAAE,UAAKK,EAAKG,KAAV,aAQd,6BACGvB,QAAQC,IAAIyB,EAASC,KACrBD,EAASC,KACRD,EAASC,IAAIR,KAAI,SAACC,GAChB,OACE,yBACEI,OAAQ,EAAK3B,UACbkB,GAAIK,EAAKQ,QACTN,IAAKF,EAAKQ,QACVH,WAAY,EAAKb,UAEjB,yBAAKM,UAAU,WACZE,EAAKS,WAAWV,KAAI,SAACW,EAAMC,GAC1B,OACE,yBACEb,UAAU,YACVH,GAAE,UAAKK,EAAKQ,QAAV,YAAqBG,GACvBT,IAAG,UAAKF,EAAKQ,QAAV,YAAqBG,GACxBlC,WAAW,EACXmC,YAAa,EAAKnB,UAClBY,WAAY,EAAKb,UAEjB,yBAAKM,UAAU,YAAYY,EAAKG,MAChC,6BAAMb,EAAKQ,yB,GA7GLM,a,MCInBC,MARf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,QCKckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASC,eAAe,SDyHpB,kBAAmBqC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.80e1e50c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Employee from \"../db/getEmployeeList.json\";\r\nimport GetOrder from \"../db/getWorkOrderList.json\";\r\nimport PostOrder from \"../db/postWorkOrderList.json\";\r\n\r\nimport \"./home.css\";\r\n\r\nconst employeeList = Employee.Employess;\r\nexport default class Home extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n  draggable = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"dragENds\");\r\n    const card_id = e.dataTransfer.getData(\"card_id\");\r\n    const card = document.getElementById(card_id);\r\n    card.style.display = \"block\";\r\n    e.target.appendChild(card);\r\n  };\r\n  dragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n  dragStart = (e) => {\r\n    console.log(\"dragStart\");\r\n    const target = e.target;\r\n    e.dataTransfer.setData(\"card_id\", target.id);\r\n  };\r\n  dragOverTable = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    console.log(employeeList);\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>WorkOrder Assignment Tool</h1>\r\n        <div>\r\n          <table>\r\n            <thead>\r\n              <tr id='head_tr'>\r\n                <th></th>\r\n                <th>21-Apr-2020</th>\r\n                <th>22-Apr-2020</th>\r\n                <th>23-Apr-2020</th>\r\n                <th>24-Apr-2020</th>\r\n                <th>25-Apr-2020</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {employeeList.map((item,index) => {\r\n                return (\r\n                  <tr\r\n                  key={index}>\r\n                    <td\r\n                    id={`${item.Name}6`}\r\n                    >{item.Name}</td>\r\n                    <td\r\n                      onDrop={this.draggable}\r\n                      onDragOver={this.dragOverTable}\r\n                      className=\"\"\r\n                      id={`${item.Name}1`}\r\n                    ></td>\r\n                    <td\r\n                      onDrop={this.draggable}\r\n                      onDragOver={this.dragOver}\r\n                      className=\"\"\r\n                      id={`${item.Name}2`}\r\n                    ></td>\r\n                    <td\r\n                      onDrop={this.draggable}\r\n                      onDragOver={this.dragOver}\r\n                      className=\"\"\r\n                      id={`${item.Name}3`}\r\n                    ></td>\r\n                    <td\r\n                      onDrop={this.draggable}\r\n                      onDragOver={this.dragOver}\r\n                      className=\"\"\r\n                      id={`${item.Name}4`}\r\n                    ></td>\r\n                    <td\r\n                      onDrop={this.draggable}\r\n                      onDragOver={this.dragOver}\r\n                      className=\"table-cell\"\r\n                      id={`${item.Name}5`}\r\n                    ></td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n\r\n          <div>\r\n            {console.log(GetOrder.job)}\r\n            {GetOrder.job &&\r\n              GetOrder.job.map((item) => {\r\n                return (\r\n                  <div\r\n                    onDrop={this.draggable}\r\n                    id={item.jobname}\r\n                    key={item.jobname}\r\n                    onDragOver={this.dragOver}\r\n                  >\r\n                    <div className=\"jobCard\">\r\n                      {item.workorders.map((work, ind) => {\r\n                        return (\r\n                          <div\r\n                            className=\"jobInCard\"\r\n                            id={`${item.jobname}-${ind}`}\r\n                            key={`${item.jobname}-${ind}`}\r\n                            draggable={true}\r\n                            onDragStart={this.dragStart}\r\n                            onDragOver={this.dragOver}\r\n                          >\r\n                            <div className=\"work-box\">{work.name}</div>\r\n                            <div>{item.jobname}</div>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport Home from './screen/home'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}